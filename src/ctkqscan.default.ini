[Settings]
; specifies if the program should try to estimate
; file sizes based on the selected file format and options
EstimateFileSizes=False
; specifies if settings should be automatically saved each
; time the application is exited.
SaveSettingsOnExit=True

[Device]
; the ID of the last used device
DeviceId=
; specifies if the GUI should prompt to select a scanner
; infuriatingly, WIA will always prompt if more than one scanner
; is present, regardless of this setting
Prompt=False
; when enabled, after each scan the program will prompt
; for one of the following actions
; - scan again using the same parameters. this is very handy when
;   scanning multiple items that are the same size
; - scan again, but display the preview dialog first. this is useful
;  when you are scanning multiple items in various sizes
; - cancel - stop scanning
Continuous=True

[Scan]
; specifies the scan intent. available values are
; - ColorIntent
; - GrayscaleIntent
; - TextIntent
Intent=ColorIntent
; specifies the DPI of the scan. Larger values mean better quality,
; but slower scan speeds and large memory requirements. WIA does not
; seem to play well with large high DPI scans and can produce
; "corrupt" scans
; also note that .NET is unable to create some of the large images you
; can create with a scan, in which case it will save the raw data
; (usually as a bitmap) with no format options or meta data
Dpi=600

[Output]
; specifies the output image format. the following formats are available
; - bmp: {B96B3CAB-0728-11D3-9D7B-0000F81EF32E} (not recommended)
; - gif: {B96B3CB0-0728-11D3-9D7B-0000F81EF32E} (not recommended)
; - jpg: {B96B3CAE-0728-11D3-9D7B-0000F81EF32E}
; - png: {B96B3CAF-0728-11D3-9D7B-0000F81EF32E}
; - tif: {B96B3CB1-0728-11D3-9D7B-0000F81EF32E}
Format=b96b3cb1-0728-11d3-9d7b-0000f81ef32e
; for jpg files, specifies the quality. Anything less than 100 will
; degrade image quality due to data loss
Quality=100
; the folder where scanned images will be saved.
; NOTE: backslashes MUST be escaped as \\
Folder=
; specifies a default filename. leave blank to have the filename
; generated from the current date and time (plus counter, if applicable)
FileName=
; specifies if an incrementing counter should be used to generate
; unique filenames. This option should be enabled if you're autosaving...
UseCounter=True
; the image counter. normally maintained automatically, but feel free to
; modify it as you need
Counter=
; specifies if images should be automatically saved. Using this option
; means you can't use the image editing tools, but does mean you can
; chain scan with a minimum of effort
AutoSave=False
; specifies if EXIF (or equivalent) meta data should be added to files,
; if supported by the selected file format (jpg or tif)
AddMetaData=True

[UI]
; the units for display values. Supported values are
; - Pixel
; - Centimeter
; - Inch
Unit=Pixel
; specifies if the preview pane is expanded
Preview=True
; specifies if a pixel grid is displayed when zooming in
PixelGrid=True
; orientation of the preview pane and control panel
; - Vertical
; - Horizontal
Orientation=Vertical

; these settings are in a group based on the computer name
; allow for different window layouts when using the same ini
; file on difference machines (for example when running from a UNC share)
;[<ComputerName>-UI]
; specifies the size of the command area
;OptionsSplitterSize=
; specifies the window position
; format is 
; x, y, w, h, state
; where state is either 0 (normal) or 2 (maximized)
;WindowPosition=

[Metadata]
; specifies meta data that can be added to images
; the key is the property ID. A list of these tags can be found at
; https://docs.microsoft.com/en-us/windows/win32/gdiplus/-gdiplus-constant-property-item-descriptions
; the value is the property type, followed by a comma, followed by the value to save
; available types can be found at
; https://docs.microsoft.com/en-us/windows/win32/gdiplus/-gdiplus-constant-image-property-tag-type-constants
; not all types have been tested. no validation is performed to ensure the supplied value
; confirms to the specified type
; you can use tokens to inject some dynamic content. tokens must be surrounded with braces { }
; current tokens
; - now         - the current UTC time, in sortable format
; - year        - four digit UTC year
; - appname     - the application name
; - appversion  - the application versions
; - #<name>     - a property from the active device, for example Name
; examples:
; PropertyTagDateTime = PropertyTagTypeASCII,{now}
; PropertyTagCopyright = PropertyTagTypeASCII,Copyright (c) {year} Richard James Moss. All Rights Reserved.
; PropertyTagSoftwareUsed = PropertyTagTypeASCII,{AppName} v{AppVersion}
; PropertyTagEquipModel = PropertyTagTypeASCII,{#Name}
; PropertyTagEquipMake = PropertyTagTypeASCII,{#Manufacturer}
; PropertyTagExifDTDigitized = PropertyTagTypeASCII,{now}
; let us know if you know of other suitable values that should be provided!
PropertyTagDateTime=PropertyTagTypeASCII,{now}
PropertyTagSoftwareUsed=PropertyTagTypeASCII,{AppName} v{AppVersion}
PropertyTagEquipModel=PropertyTagTypeASCII,{#Name}
PropertyTagEquipMake=PropertyTagTypeASCII,{#Manufacturer}
PropertyTagExifDTDigitized=PropertyTagTypeASCII,{now}
